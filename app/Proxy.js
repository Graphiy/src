/*** Generated by streamline 0.4.5 (callbacks) - DO NOT EDIT ***/ var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename),__func=__rt.__func,__cb=__rt.__cb,__tryCatch=__rt.__tryCatch; Class.create("Proxy", {








  _cbs: { },



  _subscribers: { },




  initialize: function(url) {
    var self = this;

    if (isServer) {
      this._socket = require("sockjs").createServer();
      this._socket.installHandlers($app.server, { prefix: url });


      this._socket.on("connection", function(conn) {
        conn.on("data", function(message) {
          self._onServer(conn, message); }); }); }


     else {
      var socket = this._socket = new SockJS(url);
      socket.onopen = function() {
        document.fire("proxy:connected"); };

      socket.onmessage = this._onMessage.bind(this);
      socket.onclose = function() {
        document.fire("proxy:disconnected"); }; } ; },











  send: function(cb, action, model, name, options) {
    var request = new Parcel(this._socket);
    request.action = action;
    request.model = model;
    request.name = name;
    if (options) {
      request.options = options;
      request.content = options.content; } ;

    request.send();


    this._cbs[request.id] = cb; },






  _onMessage: function _onMessage__1(e, _) { var data, __this = this; var __frame = { name: "_onMessage__1", line: 70 }; return __func(_, this, arguments, _onMessage__1, 1, __frame, function __$_onMessage__1() {
      data = new Parcel();
      return data.parse(e.data, __cb(_, __frame, 2, 4, function __$_onMessage__1() {
        debugger ;


        if (data.id) {
          if (data.content) { __this._cbs[data.id](data.content); } ;


          if (data.error) {
            __this._cbs[data.id](data.error);


            if ((data.error != "Not Found")) { __this._cbs[data.id] = undefined; } ; } ; } ; _(); }, true)); }); },








  _onServer: function _onServer__2(conn, message, _) { var data, manager, __this = this; var __frame = { name: "_onServer__2", line: 93 }; return __func(_, this, arguments, _onServer__2, 2, __frame, function __$_onServer__2() {
      data = new Parcel(conn);
      return data.parse(message, __cb(_, __frame, 2, 4, function __$_onServer__2() { return (function __$_onServer__2(__then) {

          if (data.action) {
            manager = $app.getManager(data.model); return (function __$_onServer__2(__then) {

              if (manager) { return (function __$_onServer__2(__then) {
                  if ((data.action == "get")) { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$_onServer__2() {

                          manager.get(__this.subscribe.bind(__this, data), data.name, data.options); __then(); }); })(function ___(e, __result) { __tryCatch(_, function __$_onServer__2() { if (e) {


                            if ((e != "Not Found")) { return _((e)); } ;
                            data.error = e;
                            __this.subscribe(data); __then(); } else { _(null, __result); } ; }); }); })(function ___() { __tryCatch(_, __then); }); } else { return (function __$_onServer__2(__then) {


                      if (data.action = "put") { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$_onServer__2() {

                              manager.put(__this.broadcast.bind(__this, data), data.name, data.content, data.options); __then(); }); })(function ___(e, __result) { __tryCatch(_, function __$_onServer__2() { if (e) {


                                if ((e != "Not Found")) { return _((e)); } ;
                                data.error = e;
                                __this.subscribe(data); __then(); } else { _(null, __result); } ; }); }); })(function ___() { __tryCatch(_, __then); }); } else { __then(); } ; })(__then); } ; })(__then); } else {



                data.error = "Model not supported";
                data.send(data); __then(); } ; })(__then); } else { __then(); } ; })(_); }, true)); }); },












  subscribe: function(data, diff) {
    data.content = diff;
    data.send();



    var followers = this._subscribers;
    if (!followers[data.id]) { followers[data.id] = $H(); };


    followers[data.id].set(data.recipient, data.conn); },





  broadcast: function(data, diff) {
    this.subscribe(data, diff);
    var sender = data.recipient;

    if (diff) {
      data.content = diff;
      var followers = this._subscribers[data.id];
      followers.keys().forEach(function(followerId) {

        if ((followerId == sender)) { return };
        data.recipient = followerId;
        data.conn = followers.get(followerId);
        data.send(); }); } ; }});