/*** Generated by streamline 0.4.5 (callbacks) - DO NOT EDIT ***/ var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename),__func=__rt.__func,__cb=__rt.__cb,__tryCatch=__rt.__tryCatch; Class.create("Parcel", {






  action: "",


  model: "",


  name: "",


  id: "",


  conn: null,


  content: null,


  error: null,

  options: { },


  sender: "",



  recipient: "",





  initialize: function(connection) {
    this.__defineGetter__("id", function() {

      return (this.model + this.name); });

    this.__defineSetter__("sender", function(userId) {
      this.options.sender = userId; });

    this.__defineGetter__("sender", function() {
      return (this.options.sender || this.conn.id); });

    this.__defineSetter__("recipient", function(id) {
      return this.options.recipient = id; });



    this.__defineGetter__("recipient", function() {
      return (this.options.recipient || this.sender); });

    if (connection) {
      this.conn = connection;
      this.recipient = this.conn.id; } ; },






  parse: function parse__1(message, _) { var msg, __this = this; var __frame = { name: "parse__1", line: 69 }; return __func(_, this, arguments, parse__1, 1, __frame, function __$parse__1() {
      msg = (Object.isString(message) ? JSON.parse(message) : message);
      __this.action = (msg.action || "get");
      __this.model = msg.model;
      __this.name = msg.name;
      __this.error = msg.error;
      __this.content = msg.content;
      __this.options = (msg.options || __this.options); return (function __$parse__1(__then) {

        if (isServer) { return (function __$parse__1(__then) {
            if ((__this.action == "put")) { return __this._secureFor("sender", __cb(_, __frame, 10, 32, __then, true)); } else { __then(); } ; })(__then); } else { __then(); } ; })(_); }); },






  send: function send__2(_) { var message, __this = this; var __frame = { name: "send__2", line: 86 }; return __func(_, this, arguments, send__2, 0, __frame, function __$send__2() { return (function __$send__2(__then) {
        if ((__this.model && __this.name)) { return (function __$send__2(__then) {



            if (isServer) { return __this._secureFor("recipient", __cb(_, __frame, 5, 20, __then, true)); } else { __then(); } ; })(function __$send__2() {
            message = JSON.stringify({
              action: __this.action,
              model: __this.model,
              name: __this.name,
              error: __this.error,
              content: __this.content,
              options: __this.options,
              sender: __this.sender });

            if (isServer) {
              __this.conn.write(message); }
             else {
              __this.conn.send(message); } ; __then(); }); } else {


          return _(("Parcel should have model, name specified")); } ; })(_); }); },








  _secureFor: function _secureFor__3(addressee, _) { var key, type, user, __this = this; var __frame = { name: "_secureFor__3", line: 116 }; return __func(_, this, arguments, _secureFor__3, 1, __frame, function __$_secureFor__3() {
      if (!__this.content) { return _(null); } ;
      if ((addressee == "sender")) {
        key = (__this.options.SECURE_TOKEN || __this.sender);
        type = (__this.options.SECURE_TOKEN ? "token" : "name"); }
       else {
        key = __this.recipient;
        type = (Object.isString(__this.recipient) ? "session" : "id"); } ; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$_secureFor__3() {


            return $user.store.find(__cb(_, __frame, 10, 17, function ___(__0, __1) { user = __1; __then(); }, true), "user", type, key); }); })(function ___(e, __result) { __tryCatch(_, function __$_secureFor__3() { if (e) {


              __this._restrict(); __then(); } else { _(null, __result); } ; }); }); })(function ___() { __tryCatch(_, function __$_secureFor__3() {

          if (user) {
            __this[addressee] = user.id;
            __this._restrict(user); } ; _(); }); }); }); },







  _restrict: function(user) {
    if (user) {
      debugger ;

      if (user.roles.include("admin")) { return };

      if ((this.content.owner == user.id)) { return };

      if ((this.content.session == user.session)) { return }; } ;





    var result = { };
    var manager = $app.getManager(this.model);
    if ((manager.public == "all")) { return };
    var self = this;
    manager.public.map(function(key) {
      result.key = self.content.key; });

    this.content = result; }});